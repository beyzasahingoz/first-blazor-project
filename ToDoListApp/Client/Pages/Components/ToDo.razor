@page "/todo"
@inject IJSRuntime JSRuntime
<h3>@HeaderName</h3>
<!-- Edit Form-->
<EditForm Model="task" class="form-inline" OnValidSubmit="AddTask">
    <input class="form-control mx-2" type="text" @bind-value="task.TaskName" />
    <br />
    <button class="btn btn-outline-success" mx-2 > Add Task </button>
    @*@onclick="Save"*@

</EditForm>

<div class="progress-bar my-2 mx-2" role="progressbar" style="width:@Percent)%"aria-valuemax="100" aria-valuemin="0">
    @(Percent)%
</div>


<ul class="list-group my-2">
    @foreach (var taskitem in taskList)
    {
        if (taskitem.isComplete)
        {
            <li class="list-group-item list-group-item-success mx-1" @onclick="(()=> taskitem.isComplete =!taskitem.isComplete)"><del> @taskitem.TaskName </del></li>
        }
        else
        {
            <li class="list-group-item list-group-item-secondary mx-1" @onclick="(()=> taskitem.isComplete =!taskitem.isComplete)"> @taskitem.TaskName</li>
        }


    }
</ul>



@code {
    protected List<TaskModel> taskList = new List<TaskModel>();
    protected TaskModel task = new TaskModel();

    private void AddTask()
    {
        taskList.Add(task);
        task = new TaskModel();
    }
    public int Percent {
        get
        {
            return taskList.Count> 0 ? (taskList.Count(x=> x.isComplete)*100/taskList.Count): 0;
        }
    }
    protected override void OnInitialized()
    {
        if(HeaderName == "")
        {
            HeaderName = "ToDo";
        }
    }
    //public async void Save()
    //{
    //    await Alert("NULL");
    //}
    //private async Task Alert(string Message)
    //{
    //    await JSRuntime.InvokeAsync<object>("Alert", Message);
    //}
    [Parameter]
    public string HeaderName{ get; set;}

    }

